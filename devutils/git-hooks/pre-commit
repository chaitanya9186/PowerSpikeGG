#!/bin/bash

##
# name: pre-commit-hook
# author: Axel Martin (for PowerSpikeGG)
# brief: Ensures commit respect PowerSpikeGG policy
#

source "$(dirname "${BASH_SOURCE[0]}")/../lib/bash/bazel.bash"
source "$(dirname "${BASH_SOURCE[0]}")/../lib/bash/logging.bash"
source "$(dirname "${BASH_SOURCE[0]}")/../lib/bash/prompt.bash"


# Rules checking Go code validity
PreCommit::GoChecks () {
    local filepath="$1"

    [ -z "$GOPATH" ] && Log::Failure "please install golang on workstation (\$GOPATH missing)"
    local golint="$GOPATH/bin/golint"
    [ ! -x "$golint" ] && Log::Failure "golint not found. Please run 'go get -u github.com/golang/lint/golint'."

    # Check file is correctly formatted.
    [ -n "$(gofmt -d "$filepath")" ] && Log::Error "go code is not correctly formatted."
    $golint -set_exit_status "$filepath" || Log::Error "golint tool returned errors."
    go tool vet "$filepath" || Log::Error "go vet tool returned errors."
}


# Rules checking Python code validity
PreCommit::PythonChecks () {
    local filepath="$1"

    which pep8 > /dev/null || Log::Failure "pep8 not found. Install it with pip install pep8."

    pep8 $filepath || Log::Error "invalid Python formating"
}


# Rules checking Typescript code validity
PreCommit::TypeScriptChecks () {
    local filepath="$1"

    which npm > /dev/null || Log::Failure "npm binary not found. Aborting..."
    which tslint > /dev/null || Log::Failure "Please install tslint: 'sudo npm install -g tslint typescript'"

    tslint -c "devutils/tslint.json" "$filepath" || Log::Error "invalid typescript formatting"
}


# Rules checking BUILD files validity
PreCommit::BuildChecks () {
    local filepath=$1

    [ -z "$GOPATH" ] && Log::Failure "please install golang on workstation (\$GOPATH missing)"

    if [ ! -x "$GOPATH/bin/buildifier" ]; then
        Log::Notice "buildifier executable not found at '$GOPATH/bin/buildifier'."

        Prompt::YesNoPrompt "Install it?" || Log::Failure "aborting..."

        go install github.com/bazelbuild/buildifier/buildifier
    fi

    output=$("$GOPATH/bin/buildifier" -mode=check "$filepath")
    if [ -n "$output" ]; then
        Log::Error "$output"
    fi
}


# Rules checking file is correctly registered in the commit
PreCommit::GitChecks () {
    local filepath="$1"

    # Ensure commit contains the same file that the one currently in the project
    [ "$(git status --porcelain "$filepath" | cut -c2)" != ' ' ] && \
        Log::Error "unstaged change detected, but file is staged in the commit"
}


main () {
    cd "$(bazel info workspace)" || Log::Failure "unable to go in the workspace root. Aborting..."

    # Ensures every tests affected by modified targets pass
    git diff --name-only --staged HEAD \
        | Bazel::GetAssociatedTests \
        | Bazel::TestTargets || Log::Failure "test failure, aborting commit."
    Log::Success "tests passed successfully!"

    # Per languages rules
    has_errors=false
    while read -r filepath
    do
        Log::ResetErrorCounter
        if [ -f "$filepath" ]; then
            case "$filepath" in
                *.go) PreCommit::GoChecks "$filepath";;
                *.py) PreCommit::PythonChecks "$filepath";;
                *.ts) PreCommit::TypeScriptChecks "$filepath";;
                *BUILD) PreCommit::BuildChecks "$filepath";;
                *WORKSPACE) PreCommit::BuildChecks "$filepath";;
            esac
        fi
        PreCommit::GitChecks "$filepath"

        if [ "$(Log::GetErrorCounter)" -ne 0 ]; then
            has_errors=true
            Log::Error "file $filepath contains errors"
        else
            Log::Success "file $filepath is valid"
        fi
    done <<< "$(git diff --name-only --staged HEAD)"

    ( $has_errors ) && Log::Failure "per files error detected. Aborting commit."
    Log::Success "commit is valid!"
}


if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
